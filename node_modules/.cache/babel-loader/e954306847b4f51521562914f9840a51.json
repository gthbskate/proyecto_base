{"ast":null,"code":"var _jsxFileName = \"/home/front-end/Documents/curso_front_end/proyecto_base/src/components/initialPage/InitialPage.jsx\";\nimport React, { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Formik, Form } from 'formik';\nimport * as Yup from 'yup';\nimport FormikControl from '../../library/formikControls/FormikControls';\nimport useStyles from './styles';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nimport { initialAction } from '../../redux/initialDuck';\n\nfunction InitialPage() {\n  const classes = useStyles();\n  const dispatch = useDispatch();\n  const infoData = useSelector(store => store.initialConfig.array);\n  console.log('infoData: ', infoData);\n  const [formValues, setFormValues] = useState(null);\n  const dropdownOptions = [{\n    key: 'Select an option',\n    value: ''\n  }, {\n    key: 'Option 1',\n    value: 'option1'\n  }, {\n    key: 'Option 2',\n    value: 'option2'\n  }, {\n    key: 'Option 3',\n    value: 'option3'\n  }];\n  const radioOptions = [{\n    key: 'Option 1',\n    value: 'rOption1'\n  }, {\n    key: 'Option 2',\n    value: 'rOption2'\n  }, {\n    key: 'Option 3',\n    value: 'rOption3'\n  }];\n  const checkboxOptions = [{\n    key: 'Option 1',\n    value: 'cOption1'\n  }, {\n    key: 'Option 2',\n    value: 'cOption2'\n  }, {\n    key: 'Option 3',\n    value: 'cOption3'\n  }];\n  const initialValues = {\n    email: '',\n    description: '',\n    selectOption: '',\n    radioOption: '',\n    checkboxOption: [],\n    birthDate: null\n  };\n  const savedValues = {\n    email: 'Jhon@Doe.com',\n    description: 'Lorem ipsum',\n    selectOption: '',\n    radioOption: '',\n    checkboxOption: '',\n    birthDate: new Date()\n  };\n  const validationSchema = Yup.object({\n    email: Yup.string().email('Invalid email format').required('Required!'),\n    description: Yup.string().required('Required!'),\n    selectOption: Yup.string().required('Required!'),\n    radioOption: Yup.string().required('Required!'),\n    checkboxOption: Yup.array().required('Required!'),\n    birthDate: Yup.date().required('Required!').nullable()\n  });\n\n  const onSubmit = (values, onSubmitProps) => {\n    onSubmitProps.resetForm();\n    console.log('Form data', values);\n    console.log('Saven data', JSON.parse(JSON.stringify(values)));\n    dispatch(initialAction());\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 13\n    }\n  }, \"Hola desde p\\xE1gina inicial\"), /*#__PURE__*/React.createElement(Formik, {\n    initialValues: formValues || initialValues,\n    validationSchema: validationSchema,\n    onSubmit: onSubmit,\n    enableReinitialize: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 13\n    }\n  }, formik => /*#__PURE__*/React.createElement(Form, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(FormikControl, {\n    control: \"input\",\n    type: \"email\",\n    label: \"Email\",\n    name: \"email\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 25\n    }\n  }), /*#__PURE__*/React.createElement(FormikControl, {\n    control: \"textarea\",\n    label: \"Description\",\n    name: \"description\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 25\n    }\n  }), /*#__PURE__*/React.createElement(FormikControl, {\n    control: \"select\",\n    label: \"Select a topic\",\n    name: \"selectOption\",\n    options: dropdownOptions,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 25\n    }\n  }), /*#__PURE__*/React.createElement(FormikControl, {\n    control: \"radio\",\n    label: \"Radio topic\",\n    name: \"radioOption\",\n    options: radioOptions,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 25\n    }\n  }), /*#__PURE__*/React.createElement(FormikControl, {\n    control: \"checkbox\",\n    label: \"Chechkbox topics\",\n    name: \"checkboxOption\",\n    options: checkboxOptions,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 25\n    }\n  }), /*#__PURE__*/React.createElement(FormikControl, {\n    control: \"date\",\n    label: \"Pick a date\",\n    name: \"birthDate\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 25\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    type: \"button\",\n    onClick: () => setFormValues(savedValues),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 25\n    }\n  }, \"Load\"), /*#__PURE__*/React.createElement(\"button\", {\n    type: \"reset\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 25\n    }\n  }, \"Reset\"), /*#__PURE__*/React.createElement(Typography, {\n    variant: \"h6\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 25\n    }\n  }, \"Presiona para enviar la informaci\\xF3n\"), /*#__PURE__*/React.createElement(Button, {\n    type: \"submit\",\n    variant: \"contained\",\n    color: \"primary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 25\n    }\n  }, \"Submit\"))), /*#__PURE__*/React.createElement(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 13\n    }\n  }, infoData.map(item => /*#__PURE__*/React.createElement(\"li\", {\n    key: item.name,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 25\n    }\n  }, item.name))));\n}\n\nexport default InitialPage;","map":{"version":3,"sources":["/home/front-end/Documents/curso_front_end/proyecto_base/src/components/initialPage/InitialPage.jsx"],"names":["React","useState","useDispatch","useSelector","Formik","Form","Yup","FormikControl","useStyles","Button","Typography","initialAction","InitialPage","classes","dispatch","infoData","store","initialConfig","array","console","log","formValues","setFormValues","dropdownOptions","key","value","radioOptions","checkboxOptions","initialValues","email","description","selectOption","radioOption","checkboxOption","birthDate","savedValues","Date","validationSchema","object","string","required","date","nullable","onSubmit","values","onSubmitProps","resetForm","JSON","parse","stringify","formik","map","item","name"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport {useDispatch, useSelector} from 'react-redux';\nimport { Formik, Form } from 'formik'\nimport * as Yup from 'yup'\nimport FormikControl from '../../library/formikControls/FormikControls'\n\nimport useStyles from './styles'\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\n\nimport { initialAction } from '../../redux/initialDuck'\n\n\nfunction InitialPage() {\n\n    const classes = useStyles();\n    const dispatch = useDispatch()\n    const infoData = useSelector(store => store.initialConfig.array)\n    console.log('infoData: ',infoData)\n\n    const [formValues, setFormValues] = useState(null)\n\n    const dropdownOptions = [\n        { key: 'Select an option', value: ''},\n        { key: 'Option 1', value: 'option1' },\n        { key: 'Option 2', value: 'option2' },\n        { key: 'Option 3', value: 'option3'}\n    ]\n\n    const radioOptions = [\n        { key: 'Option 1', value: 'rOption1' },\n        { key: 'Option 2', value: 'rOption2' },\n        { key: 'Option 3', value: 'rOption3'}\n    ]\n\n    const checkboxOptions = [\n        { key: 'Option 1', value: 'cOption1' },\n        { key: 'Option 2', value: 'cOption2' },\n        { key: 'Option 3', value: 'cOption3'}\n    ]\n\n    const initialValues = {\n        email: '',\n        description: '',\n        selectOption: '',\n        radioOption: '',\n        checkboxOption: [],\n        birthDate: null\n    }\n\n    const savedValues = {\n        email: 'Jhon@Doe.com',\n        description: 'Lorem ipsum',\n        selectOption: '',\n        radioOption: '',\n        checkboxOption: '',\n        birthDate: new Date()\n    }\n\n    const validationSchema = Yup.object({\n        email: Yup.string().email('Invalid email format').required('Required!'),\n        description: Yup.string().required('Required!'),\n        selectOption: Yup.string().required('Required!'),\n        radioOption: Yup.string().required('Required!'),\n        checkboxOption: Yup.array().required('Required!'),\n        birthDate: Yup.date().required('Required!').nullable()\n    })\n\n    const onSubmit = (values, onSubmitProps) => {\n\n        onSubmitProps.resetForm()\n        console.log('Form data', values)\n        console.log('Saven data', JSON.parse(JSON.stringify(values)))\n        dispatch(initialAction())\n    }\n\n    return (\n        <div className='App'>\n            <h1>Hola desde página inicial</h1>\n\n            <Formik \n                initialValues={formValues || initialValues} \n                validationSchema={validationSchema} \n                onSubmit={onSubmit}\n                enableReinitialize\n            >\n                {formik => (\n                    <Form>\n                        <FormikControl \n                            control='input'\n                            type='email' \n                            label='Email' \n                            name='email' \n                        />\n                        <FormikControl\n                            control='textarea'\n                            label='Description'\n                            name='description'\n                        />\n                        <FormikControl \n                            control='select'\n                            label='Select a topic'\n                            name='selectOption'\n                            options={dropdownOptions}\n                        />\n                        <FormikControl \n                            control= 'radio'\n                            label='Radio topic'\n                            name='radioOption'\n                            options={radioOptions}\n                        /> \n                        <FormikControl \n                            control='checkbox'\n                            label='Chechkbox topics'\n                            name='checkboxOption'\n                            options={checkboxOptions}\n                        />\n                        <FormikControl \n                            control='date'\n                            label='Pick a date'\n                            name='birthDate'\n                        /> \n                        <button \n                            type='button' \n                            onClick={()=>setFormValues(savedValues)}\n                        >\n                            Load\n                        </button>\n                        <button type='reset' \n                        >\n                                Reset\n                        </button>\n                        <Typography variant=\"h6\">Presiona para enviar la información</Typography>\n                        <Button type=\"submit\" variant=\"contained\" color=\"primary\">\n                            Submit\n                        </Button>\n                    </Form>\n                )}\n            </Formik>\n\n            <ul>\n                {\n                    infoData.map(item => (\n                        <li key={item.name}>{item.name}</li>\n                    ))\n                }\n            </ul>\n        </div>\n    )\n}\n\nexport default InitialPage\n"]},"metadata":{},"sourceType":"module"}